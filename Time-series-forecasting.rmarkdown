---
title: "Time Series Forecasting"
author: "Pranish"
format: html
editor: visual
---

```{r}
# Load necessary libraries
library(tidyverse)
library(lubridate)
library(forecast)
library(timetk)
library(ggplot2)
library(dplyr)
library(tseries)

# Load your dataset (replace 'your_data.csv' with the actual file name)
daily_data <- read.csv("C:/Users/Administrator/Downloads/bike data daily.csv")

hourly_data <- read.csv("C:/Users/Administrator/Downloads/bike data hour.csv")

str(daily_data)

head(daily_data)

view(daily_data)
view(hourly_data)
```

```{r}
daily_data[,"dteday"] <- as.Date(daily_data[,"dteday"])
daily_data[,"ncnt"] <- daily_data[,"cnt"] / max(daily_data[,"cnt"])
daily_data[,"nr"] <- daily_data[,"registered"] / max(daily_data[,"registered"])
daily_data[,"rr"] <- daily_data[,"cnt"] / max(daily_data[,"registered"])
summary(daily_data)
```

```{r}
#daily_data
daily_data %>% group_by(yr) %>% plot_time_series(dteday, temp, .color_var = season, .x_lab = "Date", .y_lab = "Normalized Temperature", 
                              .title = "Normalized Temperature vs Date for Daily Data", .interactive = TRUE)
```

```{r}
daily_data %>% group_by(yr) %>% plot_time_series(dteday, hum, .color_var = season, .x_lab = "Date", .y_lab = "Normalized Humidity", 
                              .title = "Normalized Humidity vs Date for Daily Data", .interactive = TRUE)
```

```{r}
daily_data %>% group_by(yr) %>% plot_time_series(dteday, windspeed, .color_var = season, .x_lab = "Date", .y_lab = "Normalized Windspeed", 
                              .title = "Windspeed vs Date for Daily Data", .interactive = TRUE)
```

```{r}
daily_data %>% group_by(yr) %>% plot_time_series(dteday, ncnt, .color_var = season, .x_lab = "Date", .y_lab = "Normalized Bike Rentals", 
                              .title = "Normalized Bike Rentals vs Date for Daily Data", .interactive = TRUE)
```

```{r}
daily_data %>% group_by(yr) %>% plot_time_series(dteday, nr, .color_var = season, .x_lab = "Date", .y_lab = "Normalized Registered Rentals", 
                              .title = "Normalized Registered Rentals vs Date for Daily Data", .interactive = TRUE)
```

```{r}
daily_data %>% group_by(yr) %>% plot_time_series(dteday, rr, .color_var = season, .x_lab = "Date", .y_lab = "Ratio", 
                              .title = "Ratio of Rentals to Registration vs Date for Daily Data", .interactive = TRUE)
```

```{r}
#since the humdity and windspeed data has so much noise, I will focus on temperature and bike rentals
#data cleaning
daily_data[,"temp"] <- tsclean(daily_data[,"temp"])
daily_data[,"ncnt"] <- tsclean(daily_data[,"ncnt"])
daily_data[,"nr"] <- tsclean(daily_data[,"nr"])
daily_data[,"rr"] <- tsclean(daily_data[,"rr"])
head(daily_data)
```

```{r}
#daily_data
daily_data %>% group_by(yr) %>% plot_time_series(dteday, temp, .color_var = season, .x_lab = "Date", .y_lab = "Normalized Temperature", .title = "Normalized Temperature vs Date for Daily Data", .interactive = TRUE)
```

```{r}
daily_data %>% group_by(yr) %>% plot_time_series(dteday, ncnt, .color_var = season, .x_lab = "Date", .y_lab = "Normalized Bike Rentals", .title = "Normalized Bike Rentals vs Date for Daily Data", .interactive = TRUE)
```

```{r}
daily_data %>% group_by(yr) %>% plot_time_series(dteday, nr, .color_var = season, .x_lab = "Date", .y_lab = "Normalized Registered Rentals", .title = "Normalized Registered Rentals vs Date for Daily Data", .interactive = TRUE)
```

```{r}
daily_data %>% group_by(yr) %>% plot_time_series(dteday, rr, .color_var = season, .x_lab = "Date", .y_lab = "Normalized Registered Rentals", .title = "Ratio of Rentals to Registration vs Date for Daily Data", .interactive = TRUE)
```

```{r}
#daily data
daily_data[,"temp"] %>% adf.test()
```

```{r}
daily_data[,"ncnt"] %>% adf.test()
```

```{r}
daily_data[,"nr"] %>% adf.test()
```

```{r}
daily_data[,"rr"] %>% adf.test()
```

```{r}
#decomposes the data
freq <- 365

#normalized daily rentals
norm_rentals <- ts(daily_data[, "nr"], frequency = freq)
decomped1 <- stl(norm_rentals, "periodic")
plot(decomped1$time.series[,2], ylab = "Stationary of the Normalized Rental Reservations", 
     xlab = "Daily of the Year")
```

```{r}
checkresiduals(decomped1$time.series[, 3])

```

```{r}
#normalized daily counts
norm_cnt <- ts(daily_data[, "ncnt"], frequency = freq)
decomped2 <- stl(norm_cnt, "periodic")
plot(decomped2$time.series[,2], ylab = "Stationary of the Normalized Rental Counts", 
     xlab = "Daily of the Year")
```

```{r}
checkresiduals(decomped2$time.series[, 3])
```

```{r}
#normalized daily rental rates
norm_rr <- ts(daily_data[, "rr"], frequency = freq)
decomped3 <- stl(norm_rr, "periodic")
plot(decomped3$time.series[,2], ylab = "Stationary of the Normalized Rental Counts to Reservations", 
     xlab = "Daily of the Year")

```

```{r}
checkresiduals(decomped3$time.series[, 3])
```

```{r}
#returns the stats
print("-------Noramlized Rental Reservations")
```

```{r}
shapiro.test(decomped1$time.series[, 3])
```

```{r}
print("-------Normalized Count of Rentals")
```

```{r}
shapiro.test(decomped1$time.series[, 3])
```

```{r}
print("-------Normalized Ratio of Rentals to Reservations")
```

```{r}
shapiro.test(decomped3$time.series[, 3])
```

```{r}
#bike count predictions
fit1 <- auto.arima(norm_cnt, seasonal = TRUE )
hist(fit1$residuals, xlab = "Residual", ylab = "Distribution", main = "Histogram of Model Errors - Bike Count")

```

```{r}
shapiro.test(fit1$residuals)
```

```{r}
prediction1 <- forecast(fit1, 25)
plot(prediction1, xlab = "Date", ylab = "Normalized Count of Rentals", main = "Prediction of Bike Rental Counts")
```

```{r}
#predictions of number of reservations
fit2 <- auto.arima(norm_rentals, seasonal = TRUE, )
hist(fit2$residuals, xlab = "Residual", ylab = "Distribution", main = "Histogram of Model Errors - Rental Count")
```

```{r}
shapiro.test(fit2$residuals)
```

```{r}
prediction2 <- forecast(fit2, 25)
plot(prediction2, xlab = "Date", ylab = "Normalized Rentals", main = "Prediction of Bike Rentals")
```

```{r}
#bike count predictions
fit2 <- auto.arima(norm_cnt, seasonal = TRUE, )
hist(fit2$residuals, xlab = "Residual", ylab = "Distribution", main = "Histogram of Model Errors - Count to Rental Ratio")
```

```{r}
shapiro.test(fit2$residuals)
```

```{r}
prediction3 <- forecast(fit2, 25)
plot(prediction3, xlab = "Date", ylab = "Normalized Rental Ratio", main = "Prediction of Bike Rentals to Reservations")
```


#Findings and Conclusions
After processing the raw data and using the ARIMA package to model ride share data, I was able to make predictions for the 25 days beyond the current data set. Qualitatively the data shows that was the weather gets warmer the number of bike rentals increase, and over the course of two years the number of rentals increases over the number of rentals from the previous year. As the data terminates at the end of one cycle, I expect the number of rentals to increase to a level higher than it was a year before, which is what the models are predicting. Therefore the results were what I expected - the data appears to oscillate up and down over a 1 year period with the overall data moving towards higher rental numbers.


